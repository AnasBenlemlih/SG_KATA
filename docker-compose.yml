version: '3.8'

services:
  foo-bar-quix:
    build: .
    container_name: foo-bar-quix-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Xmx512m -Xms256m
    volumes:
      - ./input:/app/input:ro
      - ./output:/app/output
      - ./logs:/app/logs
    networks:
      - foo-bar-quix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de donn√©es PostgreSQL pour la production
  postgres:
    image: postgres:15-alpine
    container_name: foo-bar-quix-db
    environment:
      POSTGRES_DB: foobarquix
      POSTGRES_USER: foobarquix
      POSTGRES_PASSWORD: foobarquix_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - foo-bar-quix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U foobarquix"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: foo-bar-quix-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - foo-bar-quix-network
    restart: unless-stopped

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: foo-bar-quix-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - foo-bar-quix-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  foo-bar-quix-network:
    driver: bridge
