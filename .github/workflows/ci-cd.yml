name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Tests et Build
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: jar-file
        path: target/*.jar

  # Job 2: Build Docker Image (sans push pour √©viter les timeouts)
  build-docker:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.working
        push: false
        tags: foo-bar-quix:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: D√©ploiement (optionnel - pour d√©mo)
  deploy:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      run: |
        echo "üöÄ D√©ploiement sur le serveur..."
        echo "Image: foo-bar-quix:latest"
        echo "üìù Instructions de d√©ploiement:"
        echo "1. Se connecter au serveur"
        echo "2. Cloner le repository: git clone https://github.com/AnasBenlemlih/SG_KATA.git"
        echo "3. Construire l'image: docker build -f Dockerfile.working -t foo-bar-quix ."
        echo "4. Lancer l'app: docker run -d -p 8080:8080 --name foo-bar-quix foo-bar-quix"
        echo ""
        echo "üåê Ou utiliser Railway/Render pour un d√©ploiement automatique!"
